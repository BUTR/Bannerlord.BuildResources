<Project>

  <Target Name="AddGameVersionMetadaAssemblyAttributes" BeforeTargets="CoreGenerateAssemblyInfo">
    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute" Condition="$(GameVersion) != ''" >
        <_Parameter1>GameVersion</_Parameter1>
        <_Parameter2>e$(GameVersion)</_Parameter2>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <Target Name="AddInternalsVisibleTo" BeforeTargets="BeforeCompile">
    <ItemGroup Condition="'@(InternalsVisibleTo->Count())' &gt; 0">
      <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
        <_Parameter1>%(InternalsVisibleTo.Identity)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <Target Name="TestCheckForGameBinaries" BeforeTargets="Test">
    <Error Condition="!Exists($(GameFolder))" Text="'GameFolder' property is not set! Can't find the game binaries!" />
  </Target>

  <Target Name="PostBuildCheckForGameFolder" BeforeTargets="PostBuildCopyToModules" Condition="$(ModuleName) != ''">
    <Warning Condition="!Exists($(GameFolder))" Text="'GameFolder' property links to a non existing folder! No modules will be copied to the game's Module folder! Check '/build/commpn.props'!"/>
  </Target>

  <Target Name="PostBuildCopyToModules" AfterTargets="PostBuildEvent" Condition="$(ModuleName) != '' AND Exists($(GameFolder))">
    <CreateDirectory Directory="$(GameFolder)/Modules/$(ModuleName)/bin/Win64_Shipping_Client" />

    <CopyFolder FromDirectory="$(TargetDir)" ToDirectory="$(GameFolder)/Modules/$(ModuleName)/bin/Win64_Shipping_Client" Regex="$(PostBuildCopyToModulesRegex)" Clean="true" />

    <CopyFolder FromDirectory="$(ProjectDir)/_Module" ToDirectory="$(GameFolder)/Modules/$(ModuleName)" Regex="^.*$" Clean="false" />

    <ItemGroup>
      <SubModuleOverrides Include="ModuleName">
        <Regex>\$modulename\$</Regex>
        <Replacement>$(ModuleName)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="Version">
        <Regex>\$version\$</Regex>
        <Replacement>$(Version)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="GameVersion" Condition="$(GameVersion) != ''">
        <Regex>\$gameversion\$</Regex>
        <Replacement>$(GameVersion)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="HarmonyVersion" Condition="$(HarmonyVersion) != ''">
        <Regex>\$harmonyversion\$</Regex>
        <Replacement>$(HarmonyVersion)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="ButterLibVersion" Condition="$(ButterLibVersion) != ''">
        <Regex>\$butterlibversion\$</Regex>
        <Replacement>$(ButterLibVersion)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="UIExtenderExVersion" Condition="$(UIExtenderExVersion) != ''">
        <Regex>\$uiextenderexversion\$</Regex>
        <Replacement>$(UIExtenderExVersion)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="ModuleLoaderVersion" Condition="$(ModuleLoaderVersion) != ''">
        <Regex>\$moduleloaderversion\$</Regex>
        <Replacement>$(ModuleLoaderVersion)</Replacement>
      </SubModuleOverrides>
    </ItemGroup>

    <ReplaceFileText
      Condition="'@(SubModuleOverrides->Count())' &gt; 0"
      File="$(GameFolder)/Modules/$(ModuleName)/SubModule.xml"
      Regex="%(SubModuleOverrides.Regex)"
      ReplacementText="%(SubModuleOverrides.Replacement)" />
  </Target>

  <UsingTask
    TaskName="CreateDirectory"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Directory ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var directory = new DirectoryInfo(Directory);
            if (!directory.Exists)
                directory.Create();
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="CopyFolder"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <FromDirectory ParameterType="System.String" Required="true" />
      <ToDirectory ParameterType="System.String" Required="true" />
      <Regex ParameterType="System.String" Required="true" />
      <Clean ParameterType="System.Boolean" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            void CopyTo(System.IO.DirectoryInfo from, System.IO.DirectoryInfo to)
            {
                if (!to.Exists)
                  to.Create();

                if (Clean)
                {
                    foreach (var fileInfo in to.GetFiles().Where(x => System.Text.RegularExpressions.Regex.IsMatch(x.Name, Regex)))
                        fileInfo.Delete();
                }

                foreach (var fileInfo in from.GetFiles().Where(x => System.Text.RegularExpressions.Regex.IsMatch(x.Name, Regex)))
                    fileInfo.CopyTo(System.IO.Path.Combine(to.FullName, fileInfo.Name), true);
                foreach (var directoryInfo in from.GetDirectories())
                    CopyTo(directoryInfo, to.CreateSubdirectory(directoryInfo.Name));
            }

            CopyTo(new System.IO.DirectoryInfo(FromDirectory), new System.IO.DirectoryInfo(ToDirectory));
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="ReplaceFileText"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <File ParameterType="System.String" Required="true" />
      <Regex ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          System.IO.File.WriteAllText(
            File,
            System.Text.RegularExpressions.Regex.Replace(System.IO.File.ReadAllText(File), Regex, ReplacementText));
        ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
