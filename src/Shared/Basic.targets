<Project>

  <PropertyGroup>
    <ModuleIdFlat>$([System.Text.RegularExpressions.Regex]::Replace($(ModuleId),"[^a-zA-Z0-9]","_"))</ModuleIdFlat>
  </PropertyGroup>

  <Target Name="WarningsForEnvs" BeforeTargets="BeforeCompile">
    <Warning Condition="$(BANNERLORD_GAME_DIR) == '' AND $(BANNERLORD_STABLE_DIR) == '' AND $(BANNERLORD_BETA_DIR) == ''" Text="Environment variable 'BANNERLORD_GAME_DIR' is not set!" />
    <Warning Condition="$(BANNERLORD_GAME_DIR) == '' AND $(BANNERLORD_STABLE_DIR) == ''" Text="Environment variable 'BANNERLORD_STABLE_DIR' is not set!" />
    <Warning Condition="$(BANNERLORD_GAME_DIR) == '' AND $(BANNERLORD_BETA_DIR) == ''" Text="Environment variable 'BANNERLORD_BETA_DIR' is not set!" />
  </Target>

  <Target Name="AddGameVersionMetadaAssemblyAttributes" BeforeTargets="CoreGenerateAssemblyInfo">
    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute" Condition="$(GameVersionWithPrefix) != ''" >
        <_Parameter1>GameVersion</_Parameter1>
        <_Parameter2>$(GameVersionWithPrefix)</_Parameter2>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <Target Name="AddInternalsVisibleTo" BeforeTargets="BeforeCompile">
    <ItemGroup Condition="'@(InternalsVisibleTo->Count())' &gt; 0">
      <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
        <_Parameter1>%(InternalsVisibleTo.Identity)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <Target Name="TestCheckForGameBinaries" BeforeTargets="Test">
    <Error Condition="!Exists($(GameFolder))" Text="'GameFolder' property is not set! Can't find the game binaries!" />
  </Target>

  <Target Name="PostBuildCheckForVariables" BeforeTargets="PostBuildCopyToModules" Condition="$(ModuleId) != ''">
    <Warning Condition="!Exists($(GameFolder))" Text="'GameFolder' property links to a non existing folder! The module won't be copied to the game's Modules folder!"/>
    <Warning Condition="$(ModuleId) == ''" Text="'ModuleId' property is not set! SubModule.xml won't have the variable '$moduleid$' replaced!" />
    <Warning Condition="$(ModuleName) == ''" Text="'ModuleName' property is not set! SubModule.xml won't have the variable '$modulename$' replaced!" />
    <Warning Condition="$(Version) == ''" Text="'Version' property is not set! SubModule.xml won't have the variable '$version$' replaced!" />
  </Target>


  <Target Name="PostBuildCopyToModules" AfterTargets="PostBuildEvent" Condition="$(ModuleId) != '' AND Exists($(GameFolder))">
    <CallTarget Targets="CopyBinaries"/>
    <CallTarget Targets="CopyModule"/>
  </Target>

  <Target Name="CopyBinaries" AfterTargets="PostBuildEvent" Condition="$(ModuleId) != '' AND Exists($(GameFolder))">
    <CreateDirectory Directory="$(GameFolder)/Modules/$(ModuleId)/bin/Win64_Shipping_Client" />

    <CopyFolder FromDirectory="$(TargetDir)" ToDirectory="$(GameFolder)/Modules/$(ModuleId)/bin/Win64_Shipping_Client" Regex="$(PostBuildCopyToModulesRegex)" Clean="true" />
  </Target>

  <Target Name="CopyModule" AfterTargets="PostBuildEvent" Condition="$(ModuleId) != '' AND Exists($(GameFolder))">
    <CopyFolder FromDirectory="$(ProjectDir)/_Module" ToDirectory="$(GameFolder)/Modules/$(ModuleId)" Regex="^.*$" Clean="false" ExcludeSourceFiles="$(ExcludeSourceFilesFromModule)" />

    <ItemGroup>
      <SubModuleOverrides Include="ModuleId">
        <Regex>\$moduleid\$</Regex>
        <Replacement>$(ModuleId)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="ModuleIdFlat">
        <Regex>\$moduleidflat\$</Regex>
        <Replacement>$(ModuleIdFlat)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="ModuleName">
        <Regex>\$modulename\$</Regex>
        <Replacement>$(ModuleName)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="Version">
        <Regex>\$version\$</Regex>
        <Replacement>$(Version)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="GameVersion" Condition="$(GameVersion) != ''">
        <Regex>\$gameversion\$</Regex>
        <Replacement>$(GameVersion)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="HarmonyVersion" Condition="$(HarmonyVersion) != ''">
        <Regex>\$harmonyversion\$</Regex>
        <Replacement>$(HarmonyVersion)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="ModuleLoaderVersion" Condition="$(ModuleLoaderVersion) != ''">
        <Regex>\$moduleloaderversion\$</Regex>
        <Replacement>$(ModuleLoaderVersion)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="ButterLibVersion" Condition="$(ButterLibVersion) != ''">
        <Regex>\$butterlibversion\$</Regex>
        <Replacement>$(ButterLibVersion)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="UIExtenderExVersion" Condition="$(UIExtenderExVersion) != ''">
        <Regex>\$uiextenderexversion\$</Regex>
        <Replacement>$(UIExtenderExVersion)</Replacement>
      </SubModuleOverrides>
      <SubModuleOverrides Include="MCMVersion" Condition="$(MCMVersion) != ''">
        <Regex>\$mcmversion\$</Regex>
        <Replacement>$(MCMVersion)</Replacement>
      </SubModuleOverrides>
    </ItemGroup>

    <ReplaceFileText
      Condition="'@(SubModuleOverrides->Count())' &gt; 0"
      File="$(GameFolder)/Modules/$(ModuleId)/SubModule.xml"
      Regex="%(SubModuleOverrides.Regex)"
      ReplacementText="%(SubModuleOverrides.Replacement)" />
  </Target>


  <UsingTask
    TaskName="CreateDirectory"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Directory ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var directory = new DirectoryInfo(Directory);
            if (!directory.Exists)
                directory.Create();
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="CopyFolder"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <FromDirectory ParameterType="System.String" Required="true" />
      <ToDirectory ParameterType="System.String" Required="true" />
      <Regex ParameterType="System.String" Required="true" />
      <ExcludeSourceFiles ParameterType="System.Boolean" Required="false" />
      <Clean ParameterType="System.Boolean" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var s = System.IO.Path.DirectorySeparatorChar;
            var excludedSourceFolders = new string[] { $"_Module{s}Assets", $"_Module{s}AssetSources", $"_Module{s}GUI{s}SpriteParts" };
            var fromDirectory = new System.IO.DirectoryInfo(FromDirectory);
            var toDirectory = new System.IO.DirectoryInfo(ToDirectory);

            void CopyTo(System.IO.DirectoryInfo from, System.IO.DirectoryInfo to)
            {
                if (!to.Exists)
                    to.Create();

                if (Clean)
                {
                    foreach (var fileInfo in to.GetFiles().Where(x => System.Text.RegularExpressions.Regex.IsMatch(x.Name, Regex)))
                        fileInfo.Delete();
                }

                foreach (var fileInfo in from.GetFiles().Where(x => System.Text.RegularExpressions.Regex.IsMatch(x.Name, Regex)))
                    fileInfo.CopyTo(System.IO.Path.Combine(to.FullName, fileInfo.Name), true);

                foreach (var directoryInfo in from.GetDirectories())
                {
                    if (ExcludeSourceFiles)
                    {
                        var relativePath = new System.Uri(fromDirectory.FullName).MakeRelativeUri(new System.Uri(directoryInfo.FullName)).OriginalString;
                        if (excludedSourceFolders.Contains(relativePath))
                            continue;
                    }
                    CopyTo(directoryInfo, to.CreateSubdirectory(directoryInfo.Name));
                }
            }

            CopyTo(fromDirectory, toDirectory);
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="ReplaceFileText"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <File ParameterType="System.String" Required="true" />
      <Regex ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          System.IO.File.WriteAllText(
            File,
            System.Text.RegularExpressions.Regex.Replace(System.IO.File.ReadAllText(File), Regex, ReplacementText));
        ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>